webpackJsonp([28],{2229:function(n,s,a){n.exports={basic:a(2722),controlled:a(2723),dataset:a(2724),"html-format":a(2725),"js-format":a(2726),"json-format":a(2727),theme:a(2728),"yaml-format":a(2729)}},2722:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","基本使用。"],["h2","en-US"],["p","Basic usage example."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Row<span class="token punctuation">,</span> Col <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> readOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> disabled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> readOnly<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  handleDisabledChange <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> disabled<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> readOnly<span class="token punctuation">,</span> disabled <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Row</span> <span class="token attr-name">gutter</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Col</span> <span class="token attr-name">span</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Col</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Col</span> <span class="token attr-name">span</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">readOnly</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>readOnly<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ReadOnly<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>readOnly<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>只读<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Col</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Col</span> <span class="token attr-name">span</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Disabled<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDisabledChange<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>禁用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Col</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Row</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code",'import { CodeArea, Switch, Row, Col } from \'choerodon-hap-ui/pro\';\n\nconst style = { height: 30 };\n\nclass App extends React.Component {\n  state = { readOnly: true, disabled: true };\n\n  handleChange = (value) => {\n    this.setState({ readOnly: value });\n  };\n\n  handleDisabledChange = (value) => {\n    this.setState({ disabled: value });\n  };\n\n  render() {\n    const { readOnly, disabled } = this.state;\n    return (\n      <Row gutter={10}>\n        <Col span={8}>\n          <CodeArea style={style} />\n        </Col>\n        <Col span={8}>\n          <CodeArea readOnly={readOnly} style={style} defaultValue="ReadOnly" />\n          <Switch onChange={this.handleChange} checked={readOnly}>只读</Switch>\n        </Col>\n        <Col span={8}>\n          <CodeArea disabled={disabled} style={style} defaultValue="Disabled" />\n          <Switch onChange={this.handleDisabledChange} checked={disabled}>禁用</Switch>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);']]],meta:{order:0,title:{"zh-CN":"基本使用","en-US":"Basic usage"},filename:"components-pro/code-area/demo/basic.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2723:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","受控代码框。"],["h2","en-US"],["p","Controlled Code Area."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    value<span class="token punctuation">:</span> <span class="token string">\'Controlled Value\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  handleChange <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { CodeArea } from 'choerodon-hap-ui/pro';\n\nconst style = { height: 30 };\n\nclass App extends React.Component {\n  state = {\n    value: 'Controlled Value',\n  }\n\n  handleChange = (value) => {\n    this.setState({ value });\n  }\n\n  render() {\n    return <CodeArea value={this.state.value} style={style} onChange={this.handleChange} />;\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);"]]],meta:{order:1,title:{"zh-CN":"受控代码框","en-US":"Controlled Code Area"},filename:"components-pro/code-area/demo/controlled.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2724:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","数据绑定"],["h2","en-US"],["p","Dataset."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> DataSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jsonText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`{\n  "compilerOptions": {\n    "strictNullChecks": true,\n    "moduleResolution": "node",\n    "allowSyntheticDefaultImports": true,\n    "experimentalDecorators": true,\n    "jsx": "preserve",\n    "noUnusedParameters": true,\n    "noUnusedLocals": true,\n    "declaration": true,\n    "target": "es6",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "es7",\n      "es2017.object"]\n  },\n  "exclude": [\n    "node_modules",\n    "lib",\n    "es"\n  ]\n}\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">550</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    autoCreate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'content\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> jsonText<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">dataSet</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ds<span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">readOnly</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code",'import { CodeArea, DataSet } from \'choerodon-hap-ui/pro\';\n\nconst jsonText = `{\n  "compilerOptions": {\n    "strictNullChecks": true,\n    "moduleResolution": "node",\n    "allowSyntheticDefaultImports": true,\n    "experimentalDecorators": true,\n    "jsx": "preserve",\n    "noUnusedParameters": true,\n    "noUnusedLocals": true,\n    "declaration": true,\n    "target": "es6",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "es7",\n      "es2017.object"]\n  },\n  "exclude": [\n    "node_modules",\n    "lib",\n    "es"\n  ]\n}\n`;\n\nconst style = { height: 550 };\n\nclass App extends React.Component {\n  ds = new DataSet({\n    autoCreate: true,\n    fields: [\n      { name: \'content\', type: \'string\', defaultValue: jsonText, required: true },\n    ],\n  });\n\n  render() {\n    return <CodeArea dataSet={this.ds} name="content" readOnly style={style} />;\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);']]],meta:{order:2,title:{"zh-CN":"数据绑定","en-US":"Dataset"},filename:"components-pro/code-area/demo/dataset.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2725:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","使用快捷键格式化代码，要传入一个formatter对象。默认的格式化快捷键是",["code","Alt + F"],"，去格式化快捷键是",["code","Alt + R"],"，可以通过属性手动配置。"],["h2","en-US"],["p","Use hotkey to format code."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> DataSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 引入格式化器，注意使用模块的默认导出</span>\n<span class="token keyword">import</span> HTMLFormatter <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro/lib/code-area/formatters/HTMLFormatter\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// 提供对应语言的语法高亮</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/mode/htmlmixed/htmlmixed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/html-lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> htmlText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div class="demo-wrapper">\n    &lt;span id="demo">Demo&lt;/span>\n&lt;/div>\n&lt;script>\nvar demo = document.getElementById(\'demo\');\ndemo.style.cssText = \'color: red;\';\n&lt;/script>\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> htmlStyle <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> mode<span class="token punctuation">:</span> <span class="token string">\'htmlmixed\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    autoCreate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'content\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> htmlText<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">dataSet</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ds<span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>htmlStyle<span class="token punctuation">}</span></span> <span class="token attr-name">formatter</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>HTMLFormatter<span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { CodeArea, DataSet } from 'choerodon-hap-ui/pro';\n// 引入格式化器，注意使用模块的默认导出\nimport HTMLFormatter from 'choerodon-hap-ui/pro/lib/code-area/formatters/HTMLFormatter';\n// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;\nif (typeof window !== 'undefined') {\n  // 提供对应语言的语法高亮\n  require('codemirror/mode/htmlmixed/htmlmixed');\n  require('codemirror/addon/lint/lint.css');\n  require('codemirror/addon/lint/lint');\n  require('codemirror/addon/lint/html-lint');\n}\n\nconst htmlText = `<div class=\"demo-wrapper\">\n    <span id=\"demo\">Demo</span>\n</div>\n<script>\nvar demo = document.getElementById('demo');\ndemo.style.cssText = 'color: red;';\n<\/script>\n`;\n\nconst htmlStyle = { height: 200 };\nconst options = { mode: 'htmlmixed' };\n\nclass App extends React.Component {\n  ds = new DataSet({\n    autoCreate: true,\n    fields: [\n      { name: 'content', type: 'string', defaultValue: htmlText, required: true },\n    ],\n  });\n\n  render() {\n    return (\n      <div>\n        <h4>HTML</h4>\n        <CodeArea dataSet={this.ds} name=\"content\" style={htmlStyle} formatter={HTMLFormatter} options={options} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);"]]],meta:{order:6,title:{"zh-CN":"HTML格式化","en-US":"HTML Format"},filename:"components-pro/code-area/demo/html-format.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2726:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","使用快捷键格式化代码，要传入一个formatter对象。默认的格式化快捷键是",["code","Alt + F"],"，去格式化快捷键是",["code","Alt + R"],"，可以通过属性手动配置。"],["h2","en-US"],["p","Use hotkey to format code."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> DataSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> JSHINT <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'jshint\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 引入格式化器，注意使用模块的默认导出</span>\n<span class="token keyword">import</span> JSFormatter <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro/lib/code-area/formatters/JSFormatter\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// 提供对应语言的语法高亮</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/mode/javascript/javascript\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/javascript-lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  window<span class="token punctuation">.</span>JSHINT <span class="token operator">=</span> JSHINT<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> jsText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`function getOptions() {\n  var options = {\n    "compilerOptions": {\n      "strictNullChecks": true,\n      "moduleResolution": "node",\n      "allowSyntheticDefaultImports": true,\n      "experimentalDecorators": true,\n      "jsx": "preserve",\n      "noUnusedParameters": true,\n      "noUnusedLocals": true,\n      "declaration": true,\n      "target": "es6",\n      "lib": [\n        "dom",\n        "dom.iterable",\n        "es7",\n        "es2017.object"\n      ]\n    },\n    "exclude": [\n      "node_modules",\n      "lib",\n      "es"\n    ]\n  };\n\n  return options;\n}\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jsStyle <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> mode<span class="token punctuation">:</span> <span class="token string">\'javascript\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    autoCreate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'content\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> jsText<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Javascript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">dataSet</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ds<span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>jsStyle<span class="token punctuation">}</span></span> <span class="token attr-name">formatter</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>JSFormatter<span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code",'import { CodeArea, DataSet } from \'choerodon-hap-ui/pro\';\nimport { JSHINT } from \'jshint\';\n// 引入格式化器，注意使用模块的默认导出\nimport JSFormatter from \'choerodon-hap-ui/pro/lib/code-area/formatters/JSFormatter\';\n// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;\nif (typeof window !== \'undefined\') {\n  // 提供对应语言的语法高亮\n  require(\'codemirror/mode/javascript/javascript\');\n  require(\'codemirror/addon/lint/lint.css\');\n  require(\'codemirror/addon/lint/lint\');\n  require(\'codemirror/addon/lint/javascript-lint\');\n\n  window.JSHINT = JSHINT;\n}\n\nconst jsText = `function getOptions() {\n  var options = {\n    "compilerOptions": {\n      "strictNullChecks": true,\n      "moduleResolution": "node",\n      "allowSyntheticDefaultImports": true,\n      "experimentalDecorators": true,\n      "jsx": "preserve",\n      "noUnusedParameters": true,\n      "noUnusedLocals": true,\n      "declaration": true,\n      "target": "es6",\n      "lib": [\n        "dom",\n        "dom.iterable",\n        "es7",\n        "es2017.object"\n      ]\n    },\n    "exclude": [\n      "node_modules",\n      "lib",\n      "es"\n    ]\n  };\n\n  return options;\n}\n`;\n\nconst jsStyle = { height: 500 };\nconst options = { mode: \'javascript\' };\n\nclass App extends React.Component {\n  ds = new DataSet({\n    autoCreate: true,\n    fields: [\n      { name: \'content\', type: \'string\', defaultValue: jsText, required: true },\n    ],\n  });\n\n  render() {\n    return (\n      <div>\n        <h4>Javascript</h4>\n        <CodeArea dataSet={this.ds} name="content" style={jsStyle} formatter={JSFormatter} options={options} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);']]],meta:{order:4,title:{"zh-CN":"Javascript格式化","en-US":"Javascript Format"},filename:"components-pro/code-area/demo/js-format.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2727:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","使用快捷键格式化代码，要传入一个formatter对象。默认的格式化快捷键是",["code","Alt + F"],"，去格式化快捷键是",["code","Alt + R"],"，可以通过属性手动配置。"],["h2","en-US"],["p","Use hotkey to format code."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> DataSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> jsonlint <span class="token keyword">from</span> <span class="token string">\'jsonlint/web/jsonlint\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 引入格式化器，注意使用模块的默认导出</span>\n<span class="token keyword">import</span> JSONFormatter <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro/lib/code-area/formatters/JSONFormatter\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// 提供对应语言的语法高亮</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/mode/javascript/javascript\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/json-lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  window<span class="token punctuation">.</span>jsonlint <span class="token operator">=</span> jsonlint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> jsonText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`{\n  "compilerOptions": {\n    "strictNullChecks": true,\n    "moduleResolution": "node",\n    "allowSyntheticDefaultImports": true,\n    "experimentalDecorators": true,\n    "jsx": "preserve",\n    "noUnusedParameters": true,\n    "noUnusedLocals": true,\n    "declaration": true,\n    "target": "es6",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "es7",\n      "es2017.object"\n    ]\n  },\n  "exclude": [\n    "node_modules",\n    "lib",\n    "es"\n  ]\n}\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jsonStyle <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> mode<span class="token punctuation">:</span> <span class="token string">\'javascript\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    autoCreate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'content\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> jsonText<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>JSON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">dataSet</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ds<span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>jsonStyle<span class="token punctuation">}</span></span> <span class="token attr-name">formatter</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>JSONFormatter<span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code",'import { CodeArea, DataSet } from \'choerodon-hap-ui/pro\';\nimport jsonlint from \'jsonlint/web/jsonlint\';\n// 引入格式化器，注意使用模块的默认导出\nimport JSONFormatter from \'choerodon-hap-ui/pro/lib/code-area/formatters/JSONFormatter\';\n// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;\nif (typeof window !== \'undefined\') {\n  // 提供对应语言的语法高亮\n  require(\'codemirror/mode/javascript/javascript\');\n  require(\'codemirror/addon/lint/lint.css\');\n  require(\'codemirror/addon/lint/lint\');\n  require(\'codemirror/addon/lint/json-lint\');\n\n  window.jsonlint = jsonlint;\n}\n\nconst jsonText = `{\n  "compilerOptions": {\n    "strictNullChecks": true,\n    "moduleResolution": "node",\n    "allowSyntheticDefaultImports": true,\n    "experimentalDecorators": true,\n    "jsx": "preserve",\n    "noUnusedParameters": true,\n    "noUnusedLocals": true,\n    "declaration": true,\n    "target": "es6",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "es7",\n      "es2017.object"\n    ]\n  },\n  "exclude": [\n    "node_modules",\n    "lib",\n    "es"\n  ]\n}\n`;\n\nconst jsonStyle = { height: 500 };\nconst options = { mode: \'javascript\' };\n\nclass App extends React.Component {\n  ds = new DataSet({\n    autoCreate: true,\n    fields: [\n      { name: \'content\', type: \'string\', defaultValue: jsonText, required: true },\n    ],\n  });\n\n  render() {\n    return (\n      <div>\n        <h4>JSON</h4>\n        <CodeArea dataSet={this.ds} name="content" style={jsonStyle} formatter={JSONFormatter} options={options} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);']]],meta:{order:5,title:{"zh-CN":"JSON格式化","en-US":"JSON Format"},filename:"components-pro/code-area/demo/json-format.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2728:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","使用不同主题。"],["h2","en-US"],["p","Using different themes."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> DataSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 这两个主题不是组件内置的主题，需要手动引入</span>\n<span class="token keyword">import</span> <span class="token string">\'codemirror/theme/material.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'codemirror/theme/idea.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> jsonText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`{\n  "compilerOptions": {\n    "strictNullChecks": true,\n    "moduleResolution": "node",\n    "allowSyntheticDefaultImports": true,\n    "experimentalDecorators": true,\n    "jsx": "preserve",\n    "noUnusedParameters": true,\n    "noUnusedLocals": true,\n    "declaration": true,\n    "target": "es6",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "es7",\n      "es2017.object"]\n  },\n  "exclude": [\n    "node_modules",\n    "lib",\n    "es"\n  ]\n}\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">525</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    theme<span class="token punctuation">:</span> <span class="token string">\'idea\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    autoCreate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'content\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> jsonText<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  handleThemeChange <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token punctuation">:</span> value <span class="token operator">?</span> <span class="token string">\'material\'</span> <span class="token punctuation">:</span> <span class="token string">\'idea\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span>\n          <span class="token attr-name">dataSet</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ds<span class="token punctuation">}</span></span>\n          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span>\n          <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleThemeChange<span class="token punctuation">}</span></span> <span class="token attr-name">unCheckedChildren</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idea<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>material<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code",'import { CodeArea, Switch, DataSet } from \'choerodon-hap-ui/pro\';\n// 这两个主题不是组件内置的主题，需要手动引入\nimport \'codemirror/theme/material.css\';\nimport \'codemirror/theme/idea.css\';\n\nconst jsonText = `{\n  "compilerOptions": {\n    "strictNullChecks": true,\n    "moduleResolution": "node",\n    "allowSyntheticDefaultImports": true,\n    "experimentalDecorators": true,\n    "jsx": "preserve",\n    "noUnusedParameters": true,\n    "noUnusedLocals": true,\n    "declaration": true,\n    "target": "es6",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "es7",\n      "es2017.object"]\n  },\n  "exclude": [\n    "node_modules",\n    "lib",\n    "es"\n  ]\n}\n`;\n\nconst style = { height: 525 };\n\nclass App extends React.Component {\n  state = {\n    theme: \'idea\',\n  }\n\n  ds = new DataSet({\n    autoCreate: true,\n    fields: [\n      { name: \'content\', type: \'string\', defaultValue: jsonText, required: true },\n    ],\n  });\n\n  handleThemeChange = (value) => {\n    this.setState({ theme: value ? \'material\' : \'idea\' });\n  }\n\n  render() {\n    return (\n      <div>\n        <CodeArea\n          dataSet={this.ds}\n          name="content"\n          options={{ theme: this.state.theme }}\n          style={style}\n        />\n        <Switch onChange={this.handleThemeChange} unCheckedChildren="idea">material</Switch>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);']]],meta:{order:3,title:{"zh-CN":"主题","en-US":"Theme"},filename:"components-pro/code-area/demo/theme.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}},2729:function(n,s){n.exports={content:["article",["h2","zh-CN"],["p","使用快捷键格式化代码，要传入一个formatter对象。默认的格式化快捷键是",["code","Alt + F"],"，去格式化快捷键是",["code","Alt + R"],"，可以通过属性手动配置。"],["h2","en-US"],["p","Use hotkey to format code."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> CodeArea<span class="token punctuation">,</span> DataSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> jsyaml <span class="token keyword">from</span> <span class="token string">\'js-yaml\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 引入格式化器，注意使用模块的默认导出</span>\n<span class="token keyword">import</span> YAMLFormatter <span class="token keyword">from</span> <span class="token string">\'choerodon-hap-ui/pro/lib/code-area/formatters/YAMLFormatter\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// 提供对应语言的语法高亮</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/mode/yaml/yaml\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint.css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'codemirror/addon/lint/yaml-lint\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  window<span class="token punctuation">.</span>jsyaml <span class="token operator">=</span> jsyaml<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> yamlText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`YAML:\n  - A human-readable data serialization language\n  - https://en.wikipedia.org/wiki/YAML\nyaml:\n  - A complete JavaScript implementation\n  - https://www.npmjs.com/package/yaml\n`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> yamlStyle <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> mode<span class="token punctuation">:</span> <span class="token string">\'yaml\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    autoCreate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'content\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> yamlText<span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>YAML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeArea</span> <span class="token attr-name">dataSet</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ds<span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>yamlStyle<span class="token punctuation">}</span></span> <span class="token attr-name">formatter</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>YAMLFormatter<span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  mountNode\n<span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","import { CodeArea, DataSet } from 'choerodon-hap-ui/pro';\nimport jsyaml from 'js-yaml';\n// 引入格式化器，注意使用模块的默认导出\nimport YAMLFormatter from 'choerodon-hap-ui/pro/lib/code-area/formatters/YAMLFormatter';\n// 处理 codemirror 的SSR问题， 如无需SSR，请用import代替require;\nif (typeof window !== 'undefined') {\n  // 提供对应语言的语法高亮\n  require('codemirror/mode/yaml/yaml');\n  require('codemirror/addon/lint/lint.css');\n  require('codemirror/addon/lint/lint');\n  require('codemirror/addon/lint/yaml-lint');\n\n  window.jsyaml = jsyaml;\n}\n\nconst yamlText = `YAML:\n  - A human-readable data serialization language\n  - https://en.wikipedia.org/wiki/YAML\nyaml:\n  - A complete JavaScript implementation\n  - https://www.npmjs.com/package/yaml\n`;\n\nconst yamlStyle = { height: 200 };\nconst options = { mode: 'yaml' };\n\nclass App extends React.Component {\n  ds = new DataSet({\n    autoCreate: true,\n    fields: [\n      { name: 'content', type: 'string', defaultValue: yamlText, required: true },\n    ],\n  });\n\n  render() {\n    return (\n      <div>\n        <h4>YAML</h4>\n        <CodeArea dataSet={this.ds} name=\"content\" style={yamlStyle} formatter={YAMLFormatter} options={options} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  mountNode\n);"]]],meta:{order:7,title:{"zh-CN":"YAML格式化","en-US":"YAML Format"},filename:"components-pro/code-area/demo/yaml-format.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#zh-CN",title:"zh-CN"},"zh-CN"]],["li",["a",{className:"bisheng-toc-h2",href:"#en-US",title:"en-US"},"en-US"]]]}}});